#+title: Doom emacs config
#+PROPERTY: header-args :tangle config.el

* Identification
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets. It is optional.
#+begin_src emacs-lisp
(setq user-full-name "Kanishak Vaidya"
      user-mail-address "kanishak@gmail")
#+end_src

* Look and Feel
** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom:

- `doom-font' -- the primary font to use
- `doom-variable-pitch-font' -- a non-monospace font (where applicable)
- `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.
- `doom-unicode-font' -- for unicode glyphs
- `doom-serif-font' -- for the `fixed-pitch-serif' face
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Hack" :size 20 :weight 'Regular)
      doom-variable-pitch-font (font-spec :family "Hack" :size 13))
#+end_src

*** Custom font sizes for Markdown mode
Using org header properties for markdown headers.
#+begin_src emacs-lisp
(custom-set-faces
 '(markdown-header-face ((t (:inherit font-lock-function-name-face :weight bold :family "Source Code Pro"))))
 '(markdown-header-face-1 ((t (:inherit org-level-1 :height 1.5 :overline t))))
 '(markdown-header-face-2 ((t (:inherit org-level-2 :height 1.4 :overline t))))
 '(markdown-header-face-3 ((t (:inherit org-level-3 :height 1.3 :overline t))))
 '(markdown-header-face-4 ((t (:inherit org-level-4 :height 1.2))))
 '(markdown-header-face-5 ((t (:inherit org-level-5 :height 1.1))))
 '(markdown-header-face-6 ((t (:inherit org-level-6 :height 1.1)))))
#+end_src

** Theme and Line Number
#+begin_src emacs-lisp
(setq doom-theme 'doom-tomorrow-night)
(setq display-line-numbers-type t)
#+end_src
* Org Mode
** Look and Feel
Org mode should use bullets instead of asteriks and org mode should open with all heading folded
#+begin_src emacs-lisp
(require 'org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(setq org-startup-folded t)
#+end_src

org-edit-src-code should open a new window
#+begin_src emacs-lisp
(setq org-src-window-setup 'other-frame)
#+end_src
** Org Publish
#+begin_src emacs-lisp
(setq org-export-with-broken-links t)
(setq org-publish-project-alist
      '(("github pages"
         :base-directory "~/pc/PhD/Presentations/my-website"
         :base-extension "org"
         :publishing-directory "~/pc/PhD/Presentations/my-website/kanishakvaidya.github.io"
         :recursive t
         :publishing-function org-html-publish-to-html)
        ("Mega Notes"
         :base-directory "~/doc/notes/Mega"
         :base-extension "org"
         :exclude "sync-dir/.*"
         :publishing-directory "~/doc/notes/Mega/sync-dir"
         :recursive t
         :publishing-function org-md-publish-to-md)))
#+end_src
* Package configuration notes
Whenever you reconfigure a package, make sure to wrap your config in an `after!' block, otherwise Doom's defaults may override your settings. E.g.

  (after! PACKAGE
    (setq x y))

The exceptions to this rule:

  - Setting file/directory variables (like `org-directory')
  - Setting variables which explicitly tell you to set them before their
    package is loaded (see 'C-h v VARIABLE' to look up their documentation).
  - Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to this file. Emacs searches the `load-path' when you load packages with `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k'). This will open documentation for it, including demos of how they are used. Alternatively, use `C-h o' to look up a symbol (functions, variables, faces, etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.

* Spelling and Grammar
Using spell-fu instead of flyspell as spell-fu is faster.
#+begin_src emacs-lisp
(after! spell-fu
  (setq ispell-dictionary "en_US"))
#+end_src
* Company mode
Change minimum prefix length for company completion to be 1 letter
#+begin_src emacs-lisp
(after! company-mode
  (setq company-minimum-prefix-length 2
        company-reftex-annotate-citations t
        company-backends '((company-capf :with company-yasnippet) company-dabbrev company-files)))
#+end_src
* Latex configuration
** Basic theming
I don't want superscript or subscript and preview PDF in zathura
#+begin_src emacs-lisp
(setq tex-fontify-script nil)
(setq font-latex-fontify-script nil)
(setq +latex-viewers '(zathura))
#+end_src
** LaTeX-mode keybindings
#+begin_src emacs-lisp :tangle nil
(map! :map LaTeX-mode-map
      :leader
      (:prefix ("l" . "LaTeX Option")
      :desc "View PDF" "v" #'TeX-view
      :desc "Compile PDF" "r" #'TeX-command-master "LaTeX" 'TeX-master-file
      :desc "Show TOC" "=" #'reftex-toc
      :desc "reftex-citations" "[" #'reftex-citation
      :desc "reftex-labels" "(" #'reftex-label))
#+end_src
** Company backends
#+begin_src emacs-lisp
(after! latex
  (setq company-backends '(((company-capf :with company-yasnippet) company-dabbrev-code))))
#+end_src

* Dired
#+begin_src emacs-lisp
(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-find-file) ; use dired-find-file instead of dired-open.
#+end_src
* Elfeed
Elfeed is a great RSS feed reader. I'll user elfeed-org to configure elfeed better
** My elfeed-org directory
#+begin_src emacs-lisp
(setq rmh-elfeed-org-files '("~/.config/doom/elfeed.org"))
#+end_src
** Elfeed only show feeds from last one week
#+begin_src emacs-lisp
(after! elfeed
  (setq elfeed-search-filter "@1-week-ago"))
#+end_src
** Automatic feed update
#+begin_src emacs-lisp
;; (add-hook! 'elfeed-search-mode-hook #'elfeed-update)
#+end_src
